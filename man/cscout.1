.TH CSCOUT 1 "24 July 2024"
.\"
.\" (C) Copyright 2003-2024 Diomidis Spinellis
.\"
.\" This file is part of CScout.
.\"
.\" CScout is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\"
.\" CScout is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with CScout.  If not, see <http://www.gnu.org/licenses/>.
.\"
.SH NAME
cscout \- C code analyzer and refactoring browser
.SH SYNOPSIS
\fBcscout\fP
[\fB\-bCcrv3\fP]
[\fB\-d D\fP]
[\fB\-E\fP \fIfile specification\fP]
[\fB\-d H\fP]
[\fB\-l\fP \fIlog file\fP]
[\fB\-p\fP \fIport\fP]
[\fB\-R\fP \fIspecification\fP]
[\fB\-m\fP \fIspecification\fP]
[\fB\-t\fP \fIsname\fP]
[\fB\-o\fP | \fB\-S\fP \fIdb\fP | \fB\-s\fP \fIdb\fP]
\fIfile\fR
.SH DESCRIPTION
\fICScout\fP is a source code analyzer and refactoring browser for collections
of C programs.
It can process workspaces of multiple projects (we define
a project as a collection of C source files that are linked together)
mapping the complexity introduced by the C preprocessor back into the
original C source code files.
\fICScout\fP takes advantage of modern hardware
advances (fast processors and large memory capacities) to analyze C
source code beyond the level of detail and accuracy provided by current
compilers and linkers.
The analysis \fICScout\fP performs takes into account
the identifier scopes introduced by the C preprocessor and the C language
proper scopes and namespaces.
.PP
\fICScout\fP as a source code analyzer can:
.IP \(bu 4
annotate source code with hyperlinks to each identifier
.IP \(bu 4
list files that would be affected by changing a specific identifier
.IP \(bu 4
determine whether a given identifier belongs to the application
or to an external library based on the accessibility and location of the
header files that declare or define it
.IP \(bu 4
locate unused identifiers taking into account inter-project
dependencies
.IP \(bu 4
perform queries for identifiers based on their namespace,
scope, reachability, and regular expressions of their name and the
filename(s) they are found in,
.IP \(bu 4
perform queries for files, based on their metrics, or properties
of the identifiers they contain
.IP \(bu 4
monitor and report superfluously included header files
.IP \(bu 4
provide accurate metrics on identifiers and files

.PP

More importantly,
\fICScout\fP helps you in refactoring code by identifying dead objects
to remove, and
can automatically perform accurate global \fIrename identifier\fP
refactorings.
\fICScout\fP will automatically rename identifiers
.IP \(bu 4
taking into account the namespace of each identifier: a renaming of
a structure tag, member, or a statement label will not affect variables
with the same name
.IP \(bu 4
respecting the scope of the renamed identifier: a rename can affect
multiple files, or variables within a single block, exactly matching
the semantics the C compiler would enforce
.IP \(bu 4
across multiple projects when the same identifier is defined in
common shared include files
.IP \(bu 4
occuring in macro bodies and \fIparts\fP of other identifiers,
when these are created through the C preprocessor's token concatenation
feature

.PP
This manual page describes the \fICScout\fP invocation and command-line
options.
Details about its web interface, setup, and configuration can be
found in the online hypertext documentation and at the project's home page
http://www.spinellis.gr/cscout.
.PP
.SH OPTIONS
.IP "\fB\-C\fP"
Create a \fIctags\fP-compatible tags file.
Tens of editors and other tools can utilize tags to help you navigate
through the code.
In contrast to other tag generation tools, the file that \fICScout\fP
creates also includes information about entities dynamically generated
through macros.
.IP "\fB\-c\fP"
Exit immediately after processing the specified files.
Useful, when you simply want to check the source code for errors or when
you want to create a \fItags\fP file.
.IP "\fB\-d D\fP"
Display the \fC#define\fP directives being processed on the standard
output.
.IP "\fB\-d H\fP"
Display the (mainly header) files being included on the standard output.
Each line is prefixed by a number of dots indicating the depth
of the included file stack.
.IP "\fB\-E\fP \fIfile specification\fP"
Preprocess the file specified with the regular expression given as the
option's argument and send the result to the standard output.
.IP "\fB\-p\fP \fIport\fP"
The web server will listen for requests on the TCP port number specified.
By default the \fICScout\fP server will listen at port 8081.
The port number must be in the range 1024-32767.
.IP "\fB\-m\fP \fIspecification\fP"
Specify the type of identifiers that \fICScout\fP will monitor.
The identifier attribute specification is given using the syntax:
Y\fB|\fPL\fB|\fPE\fB|\fPT\fB[:\fP\fIattr1\fB][:\fP\fIattr2\fP\fB]\fP...
The meaning of the first letter is:
.RS 4
.IP "Y:" 4
Match any of the specified attributes
.IP "L:" 4
Match all of the specified attributes
.IP "E:" 4
Exclude the specified attributes matched
.IP "T:" 4
Exact match of the specified attributes
.RE
.PP
Allowable attribute names and their corresponding meanings are:
.RS 4
.IP "unused:"
Unused identifier
.IP "writable:"
Writable identifier
.IP "ro:"
Read-only identifier
.IP "tag:"
Tag for a struct/union/enum
.IP "member:"
Member of a struct/union
.IP "label:"
Label
.IP "obj:"
Ordinary identifier
(note that enumeration constants and typedefs belong to the ordinary
identifier namespace)
.IP "macro:"
Preprocessor macro
.IP "umacro:"
Undefined preprocessor macro
.IP "macroarg:"
Preprocessor macro argument
.IP "fscope:"
Identifier with file scope
.IP "pscope:"
Identifier with project scope
.IP "typedef:"
Typedef
.IP "enumconst:"
Enumeration constant
.RE
.PP
The \fI-m\fP flag can provide enormous savings on the memory \fICScout\fP
uses (specify e.g. \fI-m Y:pscope\fP to only track project-global identifiers),
but the processing \fICScout\fP performs under this flag is \fIunsound\fP.
The flag should therefore be used only if you are running short
of memory.
There are cases where the use of preprocessor macros
can change the attributes of a given identifier shared
between different files.
Since the \fI-m\fP optimization is performed after each single file is
processed, the locations where an identifier is found may be misrepresented.
.IP "\fB\-r\fP"
Report on the standard error output warnings about unused and wrongly
scoped identifiers and unused included files.
The error message format is compatible with \fIgcc\fP and can
therefore be automatically processed by editors that recognize this
format.
.IP "\fB\-v\fP"
Display  the \fICScout\fP version and copyright information and exit.
.IP "\fB\-3\fP"
Implement support for trigraph characters.
.IP "\fB\-b\fP"
Operate in multiuser browse-only mode.
In this mode the web server can concurrently process multiple requests.
All web operations that can affect the server's functioning
(such as setting the various options, renaming identifiers,
refactoring function arguments, selecting a project, editing a file,
or terminating the server) are prohibited.
Call graphs are truncated to 1000 elements (nodes or edges).
.IP "\fB\-S\fP \fIdatabase dialect\fP"
Output the database schema as an SQL script.
Specify \fIhelp\fP as the database dialect to obtain a list of
supported database back-ends.
.IP "\fB\-s\fP \fIdatabase dialect\fP"
Dump the workspace contents as an SQL script.
Specify \fIhelp\fP as the database dialect to obtain a list of
supported database back-ends.
.IP "\fB\-l\fP \fIlog file\fP"
Specify the location of a file where web requests will be logged.
.IP "\fB\-R\fP  \fIspecification\fP"
Generate call graphs and exit.
The option can be specified multiple times.
The specification is the type of desired graph
(\fIfgraph.txt\fP for a file dependency graph or
\fIcgraph.txt\fP for a function and macro call graph),
optionally followed by parameters appearing in the corresponding
URL of the \fICScout\fP web interface.
The generated text file contains one space-delimited relationship per line.
It can be further processed by tools such sas \fIawk\fP and \fIdot\fP
to produce graphical output as shown in the following examples.

.DS
.nf
.ft C
# Create a function call graph and a compile-time file dependency graph
cscout -R cgraph.txt -R fgraph.txt?gtype=C.

# Convert the generated call graph into an SVG diagram
awk '
 BEGIN { print "digraph G {" }
 {print $1 "->" $2}
 END { print "}" }' cgraph.txt |
dot -Tsvg >cgraph.svg
.ft P
.fi
.DE

.IP "\fB\-t\fP  \fIname\fP"
Generate SQL output for the named table.
By default SQL output for all tables is generated.
If this option is provided, then output only for the specified tables
will be generated.
It is the user's responsibility to list the tables required to avoid
breaking integrity constraints.
The option can be specified multiple times.

.IP "\fB\-o\fP"
Create obfuscated versions of all the writable files of the workspace.
.PP
.SH EXAMPLE
Assume you want to analyze three programs in \fC/usr/src/bin\fP.
You first create the following project definition file,
\fCbin.prj\fP.
.PP
.DS
.ft C
.nf
# Some small tools from the src/bin directory
workspace bin {
        ro_prefix "/usr/include"
        cd "/usr/src/bin"
        project cp {
                cd "cp"
                file cp.c utils.c
        }
        project echo {
                cd "echo"
                file echo.c
        }
        project date {
                cd "date"
                file date.c
        }
}
.ft P
.fi
.DE
.PP
Then you compile the workspace file \fCbin.prj\fP
by running the \fICScout\fP workspace compiler \fIcswc\fP on it,
and finally you run \fIcscout\fP on the compiled workspace file.
At that point you are ready to analyze your code and rename its identifiers
through your web browser.
.PP
.DS
.ft C
.nf
$ cswc bin.prj >bin.cs
$ cscout bin.cs
Processing workspace bin
Entering directory /usr/src/bin
Processing project cp
Entering directory cp
Processing file cp.c
Done processing file cp.c
Processing file utils.c
Done processing file utils.c
Exiting directory cp
Done processing project cp
Processing project echo
Entering directory echo
Processing file echo.c
Done processing file echo.c
Exiting directory echo
Done processing project echo
Processing project date
Entering directory date
Processing file date.c
Done processing file date.c
Exiting directory date
Done processing project date
Exiting directory /usr/src/bin
Done processing workspace bin
Post-processing /usr/home/dds/src/cscout/bin.c
[...]
Post-processing /vol/src/bin/cp/cp.c
Post-processing /vol/src/bin/cp/extern.h
Post-processing /vol/src/bin/cp/utils.c
Post-processing /vol/src/bin/date/date.c
Post-processing /vol/src/bin/date/extern.h
Post-processing /vol/src/bin/date/vary.h
Post-processing /vol/src/bin/echo/echo.c
Processing identifiers
100%
We are now ready to serve you at http://localhost:8081
.ft P
.fi
.DE
.PP
.SH "SEE ALSO"
cswc(1)
.SH AUTHOR
(c) Copyright 2003-2024 Diomidis Spinellis.
