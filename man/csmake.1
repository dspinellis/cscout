.TH CSMAKE 1 "23 September 2025"
.\"
.\" (C) Copyright 2020-2025 Diomidis Spinellis
.\"
.\" This file is part of CScout.
.\"
.\" CScout is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\"
.\" CScout is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with CScout.  If not, see <http://www.gnu.org/licenses/>.
.\"
.SH NAME
csmake \- CScout make
.SH SYNOPSIS
\fBcsmake\fP
[
[\fB\-d\fP]
[\fB\-h\fP]
[\fB\-k\fP]
[\fB\-o\fP \fIoutput-file\fP]
[\fB\-s\fP \fIcs-files-directory\fP]
[\fB\-A\fP]
[\fB\-T\fP \fItemporary-directory\fP]
[\fB\-t\fP \fItime-file\fP]
[\fB\-N\fP \fIrules-file\fP]
--
]
[\fImake(1) options\fP]
.SH DESCRIPTION
\fIcsmake\fP is a wrapper around \fImake\fP and typical C compilation
commands.
When invoked instead of \fImake\fP on a clean (unbuilt) system,
it will build the system in the same way as \fImake\fP.
As a side-effect it will monitor the invocations of
\fIcc(1)\fP,
\fIgcc(1)\fP,
\fIclang(1)\fP,
\fIar(1)\fP,
\fIld(1)\fP, and
\fImv(1)\fP commands and record their environment and arguments.
With those data it will generate a \fICScout\fP project specification
that can be used to process the project that was compiled.
The project specification is saved into a file named \fImake.cs\fP.
Moreover, a separate CScout .cs file can be generated for each executable
in a specified
.I cs_files_directory.
.PP
To allow \fIcsmake\fP to be used as a drop in replacement in
build sequences that execute multiple \fImake\fP commands,
you can create a \fC/tmp/csmake-spy\fP, which will be used
to create rules for the superset of all \fImake\fP-generated executables.
.PP
\fIcsmake\fP options can be passed through \fICSMAKEFLAGS\fP environment variable.
.PP
.SH OPTIONS
.IP "\fB\-d\fP"
Run in debug mode (it also keeps spy directory in place).
.IP "\fB\-h\fP"
Print help message.
.IP "\fB\-k\fP"
Keep temporary directory in place.
.IP "\fB\-o\fP \fIoutput-file\fP"
Specify the name of the generated specification file,
which is by default
.I make.cs .
A name of - will output the file on the standard output.
.IP "\fB\-p\fP \fItoolchain-prefix\fP"
Specify the cross-compilation toolchain prefix, e.g. \fCaarch64-linux-gnu-\fP.
This changes the names of monitored toolchain commands by prefixing
their name as specified, e.g. . \fCaarch64-linux-gnu-gcc\fP and thus
allows \fIcsmake\fP to be applied in a cross-compilation environment.
.IP "\fB\-s\fP \fIcs-files-directory\fP"
Create a separate CScout .cs file for each real executable.
Save the .cs files into \fIcs-files-directory\fP in the current directory.
.IP "\fB\-A\fP"
Generate cs projects for static libraries.
.IP "\fB\-N\fP \fIrules-file\fP"
Run on an existing rules file.
.IP "\fB\-T\fP \fItemporary-directory\fP"
Set temporary directory.
Use \fItemporary-directory\fP as temporary directory,
remember to clear it if you use it multiple times.
.IP "\fB\-t\fP \fItime-file\fP"
Record C compiler timing information in the specified file.
The information recorded is the output of \fItime\fP(1) with
format \fC'%D %e %F %I %K %M %O %S %U\fP.
.PP
.SH EXAMPLES
The following commands are often the only ones required to process
a typical C project.
.PP
.DS
.ft C
.nf
make clean
csmake
cscout make.cs
.ft P
.fi
.DE
.PP
If you want to use \fIcsmake\fP with another C compiler, prepend
\fBCC=\fIcompiler-name\fR to the \fIcsmake\fP invocation,
as shown in the following example.
.PP
.DS
.ft C
.nf
CC=x86_64-w64-gcc csmake
.ft P
.fi
.DE
.PP
The following commands create an inspectable \fCrules\fP file,
and then use that to creat the final \fCmake.cs\fP file.
(Note the obligatory \fC--\fP sequence used to terminate the \fIcsmake\fP
arguments.)
.PP
.DS
.ft C
.nf
mkdir csmake-tmp
csmake -k -T csmake-tmp  --
csmake -N csmake-tmp/rules  --
.ft P
.fi
.DE
.PP
.PP
The following commands can be used to run
.I csmake
for a Debian package using the
.I dpkg-buildpackage
command.
.PP
.DS
.ft C
.nf
rm -rf tmp_dir && mkdir -p tmp_dir
CSMAKEFLAGS='-T tmp_dir -A -s cscout_projects -k --' \\
  MAKE=/usr/local/bin/csmake dpkg-buildpackage -b
.ft P
.fi
.DE
.PP
.SH "SEE ALSO"
\fIcscout\fP(1),
\fIcscut\fP(1),
\fIcssplit\fP(1).
.SH AUTHOR
(C) Copyright 2006-2024 Diomidis Spinellis.
